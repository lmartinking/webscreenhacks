// Generated by CoffeeScript 1.3.1
(function() {
  var KnobControl,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  KnobControl = (function() {

    KnobControl.name = 'KnobControl';

    function KnobControl(container) {
      var devicePixelRatio, height, square, width, wrapper, _ref;
      this.container = container;
      this.handleInputChanged = __bind(this.handleInputChanged, this);

      this.handleInputEnd = __bind(this.handleInputEnd, this);

      this.opts = {
        min: 0,
        max: 100,
        thickness: 0.3,
        readOnly: false,
        displayInput: true
      };
      this.isInteracting = false;
      $.extend(this.opts, this.container.data());
      width = this.container.width();
      height = this.container.height();
      square = Math.max(width, height);
      devicePixelRatio = (_ref = window.devicePixelRatio) != null ? _ref : 1;
      this.container.css({
        'width': width / 2,
        'top': width * 5 / 13,
        'left': width / 4,
        'font-size': width / 5,
        'padding': 0,
        'margin': 0,
        'text-align': 'center',
        'border': 'none',
        'position': 'absolute',
        'background': 'none',
        'visibility': !this.opts.displayInput ? 'hidden' : void 0
      });
      wrapper = ($('<div>')).css({
        'position': 'relative',
        'width': square,
        'height': square
      });
      this.styleTarget = ($('<div>')).css({
        'visibility': 'hidden'
      }).attr({
        'id': "" + (this.container.attr('id')) + "_knob"
      });
      this.canvas = ($('<canvas>')).css({
        'width': square,
        'height': square,
        'position': 'absolute',
        'top': 0,
        'left': 0
      }).attr({
        'width': square * devicePixelRatio,
        'height': square * devicePixelRatio
      });
      this.container.wrap(wrapper);
      this.container.after(this.canvas);
      this.container.after(this.styleTarget);
      this.canvas.bind('touchend mouseup', this.handleInputEnd).bind('touchstart mousedown touchmove mousemove', this.handleInputChanged);
      this.square = square;
      this.value = parseInt(this.container.val() || 0);
      this.draw();
    }

    KnobControl.prototype.draw = function() {
      var angle, ctx, endAngle, lineWidth, max, min, nativeSquare, radius, startAngle, thickness, _ref;
      _ref = this.opts, min = _ref.min, max = _ref.max, thickness = _ref.thickness;
      angle = ((this.value - min) / (max - min)) * (2 * Math.PI);
      nativeSquare = this.square * devicePixelRatio;
      radius = nativeSquare / 2;
      lineWidth = radius * thickness;
      startAngle = 1.5 * Math.PI;
      endAngle = startAngle + angle;
      ctx = this.canvas[0].getContext('2d');
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = this.styleTarget.css('color');
      ctx.clearRect(0, 0, nativeSquare, nativeSquare);
      ctx.beginPath();
      ctx.arc(radius, radius, radius - lineWidth, startAngle, endAngle, false);
      ctx.stroke();
      if (this.value === min) {
        endAngle = startAngle + 0.0001;
      }
      ctx.strokeStyle = this.styleTarget.css('background-color');
      ctx.beginPath();
      ctx.arc(radius, radius, radius - lineWidth, startAngle, endAngle, true);
      ctx.stroke();
    };

    KnobControl.prototype.handleInputEnd = function(evt) {
      return this.isInteracting = false;
    };

    KnobControl.prototype.handleInputChanged = function(evt) {
      var b, _v;
      evt.preventDefault();
      this.captureCoords(evt);
      if (!this.isInteracting) {
        return;
      }
      b = Math.atan2(this.currentX - this.initialX, -(this.currentY - this.initialY - this.square / 2));
      if (b < 0) {
        b += 2 * Math.PI;
      }
      _v = Math.round((b * (this.opts.max - this.opts.min) / (2 * Math.PI)) + this.opts.min);
      this.setVal(_v > this.opts.max ? this.opts.max : _v);
      return this.draw();
    };

    KnobControl.prototype.captureCoords = function(evt) {
      var left, top, _ref, _ref1;
      switch (evt.type) {
        case 'mousemove':
        case 'mousedown':
          this.currentX = evt.offsetX;
          this.currentY = evt.offsetY;
          break;
        case 'touchmove':
        case 'touchstart':
          _ref = $(evt.originalEvent.target).offset(), top = _ref.top, left = _ref.left;
          this.currentX = evt.originalEvent.touches[0].pageX - left;
          this.currentY = evt.originalEvent.touches[0].pageY - top;
      }
      if (evt.type === 'mousedown' || evt.type === 'touchstart') {
        _ref1 = this.canvas.position(), top = _ref1.top, left = _ref1.left;
        this.initialX = left + this.square / 2;
        this.initialY = top;
        this.isInteracting = true;
      }
    };

    KnobControl.prototype.setVal = function(val) {
      this.container.val(val);
      return this.value = val;
    };

    return KnobControl;

  })();

  $.fn.knob = function() {
    return this.each(function() {
      var $this;
      $this = $(this);
      if (!$this.data('knobControl')) {
        $this.data('knobControl', new KnobControl($this));
      }
      return $this;
    });
  };

}).call(this);
